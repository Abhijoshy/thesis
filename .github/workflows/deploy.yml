name: Deploy Flask App to AWS EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies locally (for testing)
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Test Flask app (basic syntax check)
      run: |
        python -c "import app; print('Flask app syntax is valid')"
        
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
      run: |
        # Create SSH key file with proper format
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Verify SSH key format
        if ! ssh-keygen -l -f private_key.pem > /dev/null 2>&1; then
          echo "ERROR: SSH key format is invalid"
          exit 1
        fi
        
        # Simple SSH options that work
        SSH_OPTS="-i private_key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR"
        
        # Test basic connection
        echo "Testing SSH connection..."
        ssh $SSH_OPTS ec2-user@$HOST "whoami && pwd"
        
        # Note: Skipping process cleanup to avoid SSH issues
        echo "Note: Skipping existing process cleanup"
        
        # Create directory
        echo "Creating application directory..."
        ssh $SSH_OPTS ec2-user@$HOST "mkdir -p /home/ec2-user/abhishek-thesis"
        
        # Upload files one by one to debug
        echo "Uploading app.py..."
        scp $SSH_OPTS app.py ec2-user@$HOST:/home/ec2-user/abhishek-thesis/
        
        echo "Uploading requirements.txt..."
        scp $SSH_OPTS requirements.txt ec2-user@$HOST:/home/ec2-user/abhishek-thesis/
        
        echo "Uploading templates folder..."
        scp $SSH_OPTS -r templates/ ec2-user@$HOST:/home/ec2-user/abhishek-thesis/
        
        echo "Uploading saved_models folder..."
        scp $SSH_OPTS -r saved_models/ ec2-user@$HOST:/home/ec2-user/abhishek-thesis/
        
        echo "Creating dataset directory and uploading balanced_dataset.csv..."
        ssh $SSH_OPTS ec2-user@$HOST "mkdir -p /home/ec2-user/abhishek-thesis/dataset"
        scp $SSH_OPTS dataset/balanced_dataset.csv ec2-user@$HOST:/home/ec2-user/abhishek-thesis/dataset/
        
        # Install all dependencies from requirements.txt with force reinstall
        echo "Installing Python dependencies from requirements.txt..."
        ssh $SSH_OPTS ec2-user@$HOST "cd /home/ec2-user/abhishek-thesis && python3 -m pip install --user --force-reinstall -r requirements.txt"
        
        # Force reinstall NumPy specifically to fix _core issue
        echo "Force reinstalling NumPy..."
        ssh $SSH_OPTS ec2-user@$HOST "python3 -m pip install --user --force-reinstall numpy==1.26.4"
        
        # Test imports before starting the app
        echo "Testing Python imports..."
        ssh $SSH_OPTS ec2-user@$HOST "cd /home/ec2-user/abhishek-thesis && python3 -c 'import flask, pandas, numpy, sklearn, plotly, joblib; print(\"All imports successful\")'"
        
        # Test NumPy core specifically
        echo "Testing NumPy core..."
        ssh $SSH_OPTS ec2-user@$HOST "python3 -c 'import numpy as np; print(f\"NumPy version: {np.__version__}\"); print(\"NumPy core test passed\")'"
        
        # Test boto3 import separately (might not have credentials but should import)
        echo "Testing AWS boto3 import..."
        ssh $SSH_OPTS ec2-user@$HOST "cd /home/ec2-user/abhishek-thesis && python3 -c 'import boto3; print(\"boto3 import successful\")'"
        
        # Create startup script and start Flask app
        echo "Creating startup script..."
        ssh $SSH_OPTS ec2-user@$HOST "cd /home/ec2-user/abhishek-thesis && echo '#!/bin/bash' > start_flask.sh"
        ssh $SSH_OPTS ec2-user@$HOST "cd /home/ec2-user/abhishek-thesis && echo 'cd /home/ec2-user/abhishek-thesis' >> start_flask.sh"
        ssh $SSH_OPTS ec2-user@$HOST "cd /home/ec2-user/abhishek-thesis && echo '# Kill any existing Flask processes' >> start_flask.sh"
        ssh $SSH_OPTS ec2-user@$HOST "cd /home/ec2-user/abhishek-thesis && echo 'pkill -f \"python.*app.py\" || true' >> start_flask.sh"
        ssh $SSH_OPTS ec2-user@$HOST "cd /home/ec2-user/abhishek-thesis && echo 'sleep 2' >> start_flask.sh"
        ssh $SSH_OPTS ec2-user@$HOST "cd /home/ec2-user/abhishek-thesis && echo 'export PYTHONPATH=/home/ec2-user/.local/lib/python3.9/site-packages:\$PYTHONPATH' >> start_flask.sh"
        ssh $SSH_OPTS ec2-user@$HOST "cd /home/ec2-user/abhishek-thesis && echo 'export FLASK_ENV=production' >> start_flask.sh"
        ssh $SSH_OPTS ec2-user@$HOST "cd /home/ec2-user/abhishek-thesis && echo 'export AWS_DEFAULT_REGION=eu-north-1' >> start_flask.sh"
        ssh $SSH_OPTS ec2-user@$HOST "cd /home/ec2-user/abhishek-thesis && echo 'nohup python3 app.py > flask_app.log 2>&1 &' >> start_flask.sh"
        ssh $SSH_OPTS ec2-user@$HOST "cd /home/ec2-user/abhishek-thesis && echo 'echo \$! > flask_app.pid' >> start_flask.sh"
        ssh $SSH_OPTS ec2-user@$HOST "chmod +x /home/ec2-user/abhishek-thesis/start_flask.sh"
        
        echo "Starting Flask application..."
        ssh $SSH_OPTS ec2-user@$HOST "/home/ec2-user/abhishek-thesis/start_flask.sh"
        
        # Give it a moment to start
        echo "Waiting for app to start..."
        sleep 15
        
        # Check if it's running (separate connection)
        echo "Checking if Flask app started..."
        ssh $SSH_OPTS ec2-user@$HOST "cd /home/ec2-user/abhishek-thesis && if [ -f flask_app.pid ]; then echo 'PID file found:'; cat flask_app.pid; fi"
        ssh $SSH_OPTS ec2-user@$HOST "cd /home/ec2-user/abhishek-thesis && ps aux | grep '[p]ython.*app.py' || echo 'Flask process not found in ps output'"
        ssh $SSH_OPTS ec2-user@$HOST "cd /home/ec2-user/abhishek-thesis && netstat -tlnp 2>/dev/null | grep ':5000' || echo 'Port 5000 not listening'"
        
        # Show logs if app failed to start
        echo "Checking Flask app logs..."
        ssh $SSH_OPTS ec2-user@$HOST "cd /home/ec2-user/abhishek-thesis && if [ -f flask_app.log ]; then echo '=== Flask App Logs ==='; tail -20 flask_app.log; else echo 'No log file found'; fi"
        
        # Test the app
        ssh $SSH_OPTS ec2-user@$HOST "curl -s http://localhost:5000 && echo 'App is responding!'"
        
        # Cleanup
        rm -f private_key.pem
        
        echo "Deployment completed!"
        echo "Access your app at: http://$HOST:5000"
